#renaming table names
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id","enrolled_dttm"="enrolled_at","unenrolled_dttm"="unenrolled_at","role"="role","fully_participated_dttm"="fully_participated_at","purchased_statement_dttm"="purchased_statement_at"
,"sex"="gender","country"="country","age_range"="age_range","highest_education_level"="highest_education_level","employment_status"="employment_status","employment_area"="employment_area","detected_country"="detected_country")
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id")
cyber_s_e_all
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id")
cyber_s_e_all = cyber_s_e_all %>% rename("learner_id" = "learner_id")
cyber_s_e_all = cyber_s_e_all %>% rename("learner" = "learner_id")
cyber_s_e_all = cyber_s_e_all %>% rename("learner_id" = "learner_id")
cyber_s_e_all = cyber_s_e_all %>% rename(learner_id = "learner_id")
cyber_s_e_all = cyber_s_e_all %>% rename(learner_id = learner_id)
cyber_s_e_all = cyber_s_e_all %>% rename("learner_id" = "learner_id")
source("~/MOOC_Assignment/src/MOOC_Analysis.R")
#pca Analysis
pca2 = prcomp(x=BreastCancer_scaled)
BreastCancer_scaled=scale(BreastCancer[2:11])
BreastCancer_scaled_co = cor(BreastCancer_scaled)
hist(BreastCancer$Cl.thickness, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Cell.size, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Cell.shape, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Marg.adhesion, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Epith.c.size, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bare.nuclei, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bare.nuclei, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bl.cromatin, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Mitoses, main="", xlab="x", ylab="Frequency")
pairs(BreastCancer[,-1])
summary(BreastCancer)
library(mlbench)
library(dplyr)
## Load the data
data(BreastCancer)
## Print first few rows
head(BreastCancer)
#Cleaning the data.
#Cl.thickness,Cell.size,Epith.c.size,Cell.shape (scores),should be numeric with reason for choosing it as a continouus data
#resopnsevariables changed to numeric
BreastCancer$Cl.thickness=as.numeric(BreastCancer$Cl.thickness)
BreastCancer$Cell.size=as.numeric(BreastCancer$Cell.size)
BreastCancer$Cell.shape=as.numeric(BreastCancer$Cell.shape)
BreastCancer$Marg.adhesion=as.numeric(BreastCancer$Marg.adhesion)
BreastCancer$Epith.c.size=as.numeric(BreastCancer$Epith.c.size)
BreastCancer$Bare.nuclei=as.numeric(BreastCancer$Bare.nuclei)
BreastCancer$Bl.cromatin=as.numeric(BreastCancer$Bl.cromatin)
BreastCancer$Normal.nucleoli=as.numeric(BreastCancer$Normal.nucleoli)
BreastCancer$Mitoses=as.numeric(BreastCancer$Mitoses)
#changing class values to either 1 or 0 (predictable variable)
BreastCancer$Class <- as.character(BreastCancer$Class)
BreastCancer$Class[BreastCancer$Class == "benign"] = 0
BreastCancer$Class[BreastCancer$Class == "malignant"] = 1
BreastCancer$Class=as.numeric(BreastCancer$Class)
BreastCancer <- BreastCancer %>% na.omit()
summary(BreastCancer)
count(BreastCancer)
# the relationships between the response variable and predictor variables and about the relationships between predictor variables?
hist(BreastCancer$Cl.thickness, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Cell.size, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Cell.shape, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Marg.adhesion, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Epith.c.size, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bare.nuclei, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bare.nuclei, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bl.cromatin, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Mitoses, main="", xlab="x", ylab="Frequency")
pairs(BreastCancer[,-1])
summary(BreastCancer)
BreastCancer_scaled=scale(BreastCancer[2:11])
BreastCancer_scaled_co = cor(BreastCancer_scaled)
#pca Analysis
pca2 = prcomp(x=BreastCancer_scaled)
summary(pca2)
BreastCancer_scaled=scale(BreastCancer[2:10])
BreastCancer_scaled_co = cor(BreastCancer_scaled)
#pca Analysis
pca2 = prcomp(x=BreastCancer_scaled)
summary(pca2)
#renaming table names
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id","enrolled_dttm"="enrolled_at","unenrolled_dttm"="unenrolled_at","role"="role","fully_participated_dttm"="fully_participated_at","purchased_statement_dttm"="purchased_statement_at"
,"sex"="gender","country"="country","age_range"="age_range","highest_education_level"="highest_education_level","employment_status"="employment_status","employment_area"="employment_area","detected_country"="detected_country")
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id")
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id","enrolled_dttm"="enrolled_at","unenrolled_dttm"="unenrolled_at","role"="role","fully_participated_dttm"="fully_participated_at","purchased_statement_dttm"="purchased_statement_at"
,"sex"="gender","country"="country","age_range"="age_range","highest_education_level"="highest_education_level","employment_status"="employment_status","employment_area"="employment_area","detected_country"="detected_country")
source("~/MOOC_Assignment/src/MOOC_Analysis.R")
#code created 10/12/2022
#code updated 11/10/2022   #renaming
#create.project("MOOC_Assignment")
#program start
#pre-processing starting
#library(ProjectTemplate)
#load.project()
library(tidyverse)
#renaming table names
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id","enrolled_dttm"="enrolled_at","unenrolled_dttm"="unenrolled_at","role"="role","fully_participated_dttm"="fully_participated_at","purchased_statement_dttm"="purchased_statement_at"
,"sex"="gender","country"="country","age_range"="age_range","highest_education_level"="highest_education_level","employment_status"="employment_status","employment_area"="employment_area","detected_country"="detected_country")
count(cyber_s_e_all)
cyber_s_e_all
#data cleaning by removing unwanted spaces and removing ambigous values
library(dply)
#data cleaning by removing unwanted spaces and removing ambigous values
library(dplyr)
cyber_s_e_all <- cyber_s_e_all %>% rename("learner_id" = "learner_id","enrolled_dttm"="enrolled_at","unenrolled_dttm"="unenrolled_at","role"="role","fully_participated_dttm"="fully_participated_at","purchased_statement_dttm"="purchased_statement_at"
,"sex"="gender","country"="country","age_range"="age_range","highest_education_level"="highest_education_level","employment_status"="employment_status","employment_area"="employment_area","detected_country"="detected_country")
rename("learner_id" = "learner_id")
rename("learner_id" = learner_id)
rename("learner_id" = cyber_s_e_all$learner_id)
my_data <- as_tibble(iris)
my_data
my_data <- data(iris)
my_data
my_data
my_data(head)
data(iris)
iris(head)
head(iris)
my_data <- as_tibble(iris)
my_data
my_data %>% rename(
sepal_length = Sepal.Length,
sepal_width = Sepal.Width
)
cyber_s_e_all <- cyber_s_e_all %>% rename(cyber_s_e_all,"learner_id" = "learner_id","enrolled_dttm"="enrolled_at","unenrolled_dttm"="unenrolled_at","role"="role","fully_participated_dttm"="fully_participated_at","purchased_statement_dttm"="purchased_statement_at"
,"sex"="gender","country"="country","age_range"="age_range","highest_education_level"="highest_education_level","employment_status"="employment_status","employment_area"="employment_area","detected_country"="detected_country")
rename(cyber_s_e_all,"learner_id" = 1)
rename(cyber_s_e_all,learner_id = 1)
rename(mtcars, ChangedNameAgain = 1)
class(iris$Sepal.Length)
my_data %>% rename(
sepal_length = Sepal.Length,
sepal_width = Sepal.Width
)
my_data %>% rename(
sepal_length = Sepal.Length,
sepal_width = Sepal.Width
)
my_data %>%
rename(
sepal_length = Sepal.Length,
sepal_width = Sepal.Width
)
my_data
my_data %>%
rename(
sepal_length = Sepal.Length,
sepal_width = Sepal.Width
)
my_data %>%
rename(
Sepal_Length = demo1,
Sepal_Width = demo2
)
my_data %>%
rename(
Sepal_Length = demo1,
Sepal_Width = demo2
)
my_data
my_data %>%
rename(
Sepal.Length = demo1,
Sepal.Width = demo2
)
my_iris_data <- as_tibble(iris)
my_iris_data
my_iris_data %>%
rename(
demo1 = Sepal.Length,
demo2 = Sepal.Width
)
my_iris_data <- my_iris_data %>%
rename(
demo1 = Sepal.Length,
demo2 = Sepal.Width
)
my_iris_data <- my_iris_data %>%
rename(
demo1 = Sepal.Length
)
my_iris_data = rename( my_iris_data,
demo1 = Sepal.Length )
my_iris_data = rename( my_iris_data,
demo1 = Sepal.Length )
names(my_iris_data)[names(my_iris_data) == 'Sepal.Length'] <- 'PCLASS'
my_iris_data
names(cyber_s_e_all)[names(cyber_s_e_all) == 'enrolled_at'] <- 'enrolled_dttm'
cyber_s_e_all
names(cyber_s_e_all)[names(cyber_s_e_all) == 'enrolled_at'] <- 'enrolled_dttm'
names(cyber_s_e_all)[names(cyber_s_e_all) == 'unenrolled_at'] <- 'unenrolled_dttm'
names(cyber_s_e_all)[names(cyber_s_e_all) == 'fully_participated_at'] <- 'fully_participated_dttm'
names(cyber_s_e_all)[names(cyber_s_e_all) == 'purchased_statement_at'] <- 'purchased_statement_dttm'
cyber_s_e_all$unenrolled_dttm <- trimws(cyber_s_e_all$unenrolled_dttm, which = c("both"))
cyber_s_e_all$learner_id <- trimws(cyber_s_e_all$learner_id, which = c("both"))
cyber_s_e_all$role <- trimws(cyber_s_e_all$role, which = c("both"))
cyber_s_e_all$sex <- trimws(cyber_s_e_all$sex, which = c("both"))
cyber_s_e_all$country <- trimws(cyber_s_e_all$country, which = c("both"))
cyber_s_e_all$age_range <- trimws(cyber_s_e_all$age_range, which = c("both"))
cyber_s_e_all$highest_education_level <- trimws(cyber_s_e_all$highest_education_level, which = c("both"))
cyber_s_e_all$employment_status <- trimws(cyber_s_e_all$employment_status, which = c("both"))
cyber_s_e_all$employment_area <- trimws(cyber_s_e_all$employment_area, which = c("both"))
cyber_s_e_all$detected_country <- trimws(cyber_s_e_all$detected_country, which = c("both"))
cyber_s_e_all["unenrolled_dttm"][cyber_s_e_all["unenrolled_dttm"] == ""] <- "9999-12-31 00:00:00 UTC"
cyber_s_e_all["fully_participated_dttm"][cyber_s_e_all["fully_participated_dttm"] == ""] <- "9999-12-31 00:00:00 UTC"
cyber_s_e_all["purchased_statement_dttm"][cyber_s_e_all["purchased_statement_dttm"] == ""] <- "9999-12-31 00:00:00 UTC"
cyber_s_e_all["sex"][cyber_s_e_all["sex"] == "Unknown"] <- "Prefer Not to Say"
names(cyber_s_e_all)[names(cyber_s_e_all) == 'gender'] <- 'sex'
cyber_s_e_all$unenrolled_dttm <- trimws(cyber_s_e_all$unenrolled_dttm, which = c("both"))
cyber_s_e_all$learner_id <- trimws(cyber_s_e_all$learner_id, which = c("both"))
cyber_s_e_all$role <- trimws(cyber_s_e_all$role, which = c("both"))
cyber_s_e_all$sex <- trimws(cyber_s_e_all$sex, which = c("both"))
cyber_s_e_all$country <- trimws(cyber_s_e_all$country, which = c("both"))
cyber_s_e_all$age_range <- trimws(cyber_s_e_all$age_range, which = c("both"))
cyber_s_e_all$highest_education_level <- trimws(cyber_s_e_all$highest_education_level, which = c("both"))
cyber_s_e_all$employment_status <- trimws(cyber_s_e_all$employment_status, which = c("both"))
cyber_s_e_all$employment_area <- trimws(cyber_s_e_all$employment_area, which = c("both"))
cyber_s_e_all$detected_country <- trimws(cyber_s_e_all$detected_country, which = c("both"))
cyber_s_e_all["unenrolled_dttm"][cyber_s_e_all["unenrolled_dttm"] == ""] <- "9999-12-31 00:00:00 UTC"
cyber_s_e_all["fully_participated_dttm"][cyber_s_e_all["fully_participated_dttm"] == ""] <- "9999-12-31 00:00:00 UTC"
cyber_s_e_all["purchased_statement_dttm"][cyber_s_e_all["purchased_statement_dttm"] == ""] <- "9999-12-31 00:00:00 UTC"
cyber_s_e_all["sex"][cyber_s_e_all["sex"] == "Unknown"] <- "Prefer Not to Say"
cyber_s_e_all$enrolled_dttm<- as.POSIXct( cyber_s_e_all$enrolled_dttm, tz = "UTC" )
cyber_s_e_all$unenrolled_dttm<- as.POSIXct( cyber_s_e_all$unenrolled_dttm, tz = "UTC" )
cyber_s_e_all$fully_participated_dttm<- as.POSIXct( cyber_s_e_all$fully_participated_dttm, tz = "UTC" )
cyber_s_e_all$purchased_statement_dttm<- as.POSIXct( cyber_s_e_all$purchased_statement_dttm, tz = "UTC" )
source("~/MOOC_Assignment/src/MOOC_Analysis.R")
#plot
plot(pca2$x[,1], pca2$x[,2], xlab="First PC", ylab="Second PC")
# Add labels representing the cancer types
text(pca2$x[,1], pca2$x[,2], labels=round(BreastCancer_scaled[,10]), cex=0.7, pos=3)
#pca Analysis
pca2 = prcomp(x=BreastCancer_scaled)
#pca Analysis
pca2 = prcomp(x=BreastCancer_scaled)
ibrary(mlbench)
library(dplyr)
## Load the data
data(BreastCancer)
## Print first few rows
head(BreastCancer)
#Cleaning the data.
#Cl.thickness,Cell.size,Epith.c.size,Cell.shape (scores),should be numeric with reason for choosing it as a continouus data
#resopnsevariables changed to numeric
BreastCancer$Cl.thickness=as.numeric(BreastCancer$Cl.thickness)
BreastCancer$Cell.size=as.numeric(BreastCancer$Cell.size)
BreastCancer$Cell.shape=as.numeric(BreastCancer$Cell.shape)
BreastCancer$Marg.adhesion=as.numeric(BreastCancer$Marg.adhesion)
BreastCancer$Epith.c.size=as.numeric(BreastCancer$Epith.c.size)
BreastCancer$Bare.nuclei=as.numeric(BreastCancer$Bare.nuclei)
BreastCancer$Bl.cromatin=as.numeric(BreastCancer$Bl.cromatin)
BreastCancer$Normal.nucleoli=as.numeric(BreastCancer$Normal.nucleoli)
BreastCancer$Mitoses=as.numeric(BreastCancer$Mitoses)
#changing class values to either 1 or 0 (predictable variable)
BreastCancer$Class <- as.character(BreastCancer$Class)
BreastCancer$Class[BreastCancer$Class == "benign"] = 0
BreastCancer$Class[BreastCancer$Class == "malignant"] = 1
BreastCancer$Class=as.numeric(BreastCancer$Class)
BreastCancer <- BreastCancer %>% na.omit()
summary(BreastCancer)
count(BreastCancer)
# the relationships between the response variable and predictor variables and about the relationships between predictor variables?
hist(BreastCancer$Cl.thickness, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Cell.size, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Cell.shape, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Marg.adhesion, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Epith.c.size, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bare.nuclei, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bare.nuclei, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Bl.cromatin, main="", xlab="x", ylab="Frequency")
hist(BreastCancer$Mitoses, main="", xlab="x", ylab="Frequency")
pairs(BreastCancer[,-1])
summary(BreastCancer)
BreastCancer_scaled=scale(BreastCancer[2:10])
BreastCancer_scaled_co = cor(BreastCancer_scaled)
# selecting the best variables for
par(mar=c(11,4,4,4))
barplot(sort(BreastCancer_scaled_co[c(1:9),c(10)]),
main = "",
xlab = "",
ylab = "Dependency",
las=2,
names.arg = c("Mitoses","Epith.c.size","Marg.adhesion","Cl.thickness","Normal.nucleoli","Bl.cromatin","Cell.size","Cell.shape","Bare.nuclei"),
col = "darkred",
horiz = 0)
# the graph show that Mitoses dependency is relatively low.
############################################################################################################################################################
#pca Analysis
pca2 = prcomp(x=BreastCancer_scaled)
summary(pca2)
#variable reduction table using pca analysis and plotting them
'''
Cl.thickness	Cell.size	   Cell.shape	   Marg.adhesion	Epith.c.size	Bare.nuclei	  Bl.cromatin	  Normal.nucleoli	  Mitoses	    Class	      cum.Prop	cum.perc
PC1	-0.285307	    -0.3550169	 -0.3525299	   -0.3096878	    -0.3113991   	-0.3182664	  -0.3232392	   -0.3125422	     -0.2127678	  -0.355921  	 0.6738	   67.38
PC2	-0.15440215	  -0.01636077	 -0.05415157	 -0.01341758	   0.19164486	  -0.25359867	  -0.19053076   	0.06152385     	0.89888031 	-0.15384042	 0.75206	75.206
'''
#plot
plot(pca2$x[,1], pca2$x[,2], xlab="First PC", ylab="Second PC")
# Add labels representing the cancer types
text(pca2$x[,1], pca2$x[,2], labels=round(BreastCancer_scaled[,10]), cex=0.7, pos=3)
#from the plot -1 means the benign and 1 means malignant
#plot
plot(pca2$x[,1], pca2$x[,2], xlab="First PC", ylab="Second PC")
# Add labels representing the cancer types
text(pca2$x[,1], pca2$x[,2], labels=round(BreastCancer_scaled[,9]), cex=0.7, pos=3)
legend(x="topleft", pch=1, col = c("red", "black"), legend = c("B", "M"))
#plot
plot(pca2$x[,1], pca2$x[,2], xlab="First PC", ylab="Second PC",col = (class + 1))
#plot
plot(pca2$x[,1], pca2$x[,2], xlab="First PC", ylab="Second PC")
# Add labels representing the cancer types
text(pca2$x[,1], pca2$x[,2], labels=round(BreastCancer_scaled[,9]), cex=0.7, pos=3)
BreastCancer_scaled[,9]
BreastCancer_scaled
BreastCancer
# Add labels representing the cancer types
text(pca2$x[,1], pca2$x[,2], labels=round(BreastCancer[,11]), cex=0.7, pos=3)
#plot
plot(pca2$x[,1], pca2$x[,2], xlab="First PC", ylab="Second PC")
# Add labels representing the cancer types
text(pca2$x[,1], pca2$x[,2], labels=round(BreastCancer[,11]), cex=0.7, pos=3)
legend(x="topleft", pch=1, col = c("red", "black"), legend = c("0-benign", "M-"))
legend(x="topleft", pch=1, legend = c("0-benign", "M-malignant"))
legend(x="topleft", pch=1, legend = c("0-benign", "1-malignant"))
#plot
plot(pca2$x[,1], pca2$x[,2], xlab="First PC", ylab="Second PC")
# Add labels representing the cancer types
text(pca2$x[,1], pca2$x[,2], labels=round(BreastCancer[,11]), cex=0.7, pos=3)
legend(x="topleft", pch=1, legend = c("0-benign", "1-malignant"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library('ProjectTemplate')
load.project()
print(cyber_s_e_all)
cyber_s_e_sex=cyber_s_e_all %>% count(sex,sort=1)
count(sex,sort=1)
# Modelling start- Iteration phase 1
cyber_s_e_sex=cyber_s_e_all %>% count(sex,sort=TRUE)
cyber_s_e_sex
count(sex)
count(cyber_s_e_all$sex,sort=TRUE)
count(cyber_s_e_all$sex)
count(cyber_s_e_all$sex,sort=TRUE)
# Modelling start- Iteration phase 1
cyber_s_e_sex=cyber_s_e_all %>% count(cyber_s_e_all$sex)
count(cyber_s_e_all$sex)
cyber_s_e_all %>% count(cyber_s_e_all$sex)
# Modelling start- Iteration phase 1
cyber_s_e_sex= count(cyber_s_e_all$sex)
cyber_s_e_sex <- cyber_s_e_sex %>% rename("Total_Number" = "freq")
cyber_s_e_sex= count(cyber_s_e_all$sex)
cyber_s_e_sex= count(cyber_s_e_all$sex)
cyber_s_e_sex= count(cyber_s_e_all$sex)
cyber_s_e_sex
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(cyber_s_e_sex)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(cyber_s_e_sex)
knitr::opts_chunk$set(message = FALSE, warning = TRUE)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(cyber_s_e_sex)
knitr::opts_chunk$set(message = FALSE, warning = TRUE)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(cyber_s_e_sex)
knitr::opts_chunk$set(message = FALSE, warning = TRUE)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(cyber_s_e_all)
knitr::opts_chunk$set(message = FALSE, warning = TRUE)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(cyber_s_e_all)
print(cyber_s_e_all)
knitr::opts_chunk$set(message = FALSE, warning = TRUE)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(1)
knitr::opts_chunk$set(message = FALSE, warning = TRUE)
cyber_s_e_sex= count(cyber_s_e_all$sex)
1
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = TRUE
)
cyber_s_e_sex= count(cyber_s_e_all$sex)
cyber_s_e_sex
#barplot
ggplot(cyber_s_e_sex, aes( y=freq, x=x)) +
geom_bar( stat="identity") + ggtitle("Gender vs Total Number)") +
ylab("Frequency") +
xlab("Sex/Gender") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=0.8,size=14),axis.text.y = element_text(size=20),text=element_text(size=15))
knitr::opts_chunk$set(echo = FALSE)
ggplot(cyber_s_e_sex, aes( y=freq, x=x)) +
geom_bar( stat="identity") + ggtitle("Gender vs Total Number)") +
ylab("Frequency") +
xlab("Sex/Gender") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=0.8,size=14),axis.text.y = element_text(size=20),text=element_text(size=15))
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
cyber_s_e_sex= count(cyber_s_e_all$sex)
plot(pressure)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print('gfgfghf')
print('gfgfghf')
knitr::opts_chunk$set(echo = FALSE)
ggplot(cyber_s_e_sex, aes( y=freq, x=x)) +
geom_bar( stat="identity") + ggtitle("Gender vs Total Number)") +
ylab("Frequency") +
xlab("Sex/Gender") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=0.8,size=14),axis.text.y = element_text(size=20),text=element_text(size=15))
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
cyber_s_e_sex= count(cyber_s_e_all$sex)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
cyber_s_e_sex= count(cyber_s_e_all$sex)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
cyber_s_e_sex= count(cyber_s_e_all$sex)
print(cyber_s_e_sex)
knitr::opts_chunk$set(echo = FALSE)
ggplot(cyber_s_e_sex, aes( y=freq, x=x)) +
geom_bar( stat="identity") + ggtitle("Gender vs Total Number)") +
ylab("Frequency") +
xlab("Sex/Gender") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=0.8,size=14),axis.text.y = element_text(size=20),text=element_text(size=15))
knitr::opts_chunk$set(echo = FALSE)
ggplot(cyber_s_e_sex, aes( y=freq, x=x)) +
geom_bar( stat="identity") + ggtitle("Gender vs Total Number)") +
ylab("Frequency") +
xlab("Sex/Gender") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=0.8,size=14),axis.text.y = element_text(size=20),text=element_text(size=15))
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
cyber_s_e_sex= count(cyber_s_e_all$sex)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library('ProjectTemplate')
load.project()
setwd("~/MOOC_Assignment")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library('ProjectTemplate')
load.project()
source("src/analysis.R"))
source("src/analysis.R")
setwd("~/MOOC_Assignment")
source("src/analysis.R")
source("src/analysis.R")
source("src/MOOC_Analysis.R")
setwd("~/MOOC_Assignment")
source("src/MOOC_Analysis.R")
source("src/MOOC_Analysis.R")
source("src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
source("src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
source("src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
source("src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
source("src/MOOC_Analysis.R")
setwd("~/MOOC_Assignment/src")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
source("src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
source("src/MOOC_Analysis.R")
setwd("~/MOOC_Assignment/src")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
setwd("~/MOOC_Assignment/src/")
source("~/MOOC_Assignment/src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
source("~/MOOC_Assignment/src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir= normalizePath('..'))
source("~/MOOC_Assignment/src/MOOC_Analysis.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
migrate.project()
# Example Unit Testing Script
context("Example tests")
